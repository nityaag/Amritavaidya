package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chatwithus_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List<String> _jspx_dependants;

  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;

  public java.util.List<String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;

    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title> Chatbot</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            font-family: Arial, sans-serif;\n");
      out.write("            margin: 0;\n");
      out.write("            padding: 0;\n");
      out.write("            background: linear-gradient(135deg, #f0ffff, #ccffff);\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: center;\n");
      out.write("            align-items: center;\n");
      out.write("            height: 100vh;\n");
      out.write("            color: #e9ecef;\n");
      out.write("        }\n");
      out.write("        .chat-container {\n");
      out.write("            width: 100%;\n");
      out.write("            max-width: 480px;\n");
      out.write("            background-color: #c2e5d3;\n");
      out.write("            border-radius: 15px;\n");
      out.write("            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);\n");
      out.write("            overflow: hidden;\n");
      out.write("            display: flex;\n");
      out.write("            flex-direction: column;\n");
      out.write("            height: 90vh;\n");
      out.write("        }\n");
      out.write("        .chat-header {\n");
      out.write("            background: linear-gradient(135deg,#afeeee, #8b9dc3);\n");
      out.write("            color: #fff;\n");
      out.write("            padding: 20px;\n");
      out.write("            text-align: center;\n");
      out.write("        }\n");
      out.write("        .chat-header h1 {\n");
      out.write("            margin: 0;\n");
      out.write("            font-size: 1.8rem;\n");
      out.write("            letter-spacing: 1px;\n");
      out.write("        }\n");
      out.write("        .chat-messages {\n");
      out.write("            flex-grow: 1;\n");
      out.write("            padding: 20px;\n");
      out.write("            overflow-y: auto;\n");
      out.write("            background: #007c80;\n");
      out.write("        }\n");
      out.write("        .message {\n");
      out.write("            display: flex;\n");
      out.write("            align-items: flex-start;\n");
      out.write("            margin-bottom: 15px;\n");
      out.write("        }\n");
      out.write("        .message-content {\n");
      out.write("            padding: 12px 15px;\n");
      out.write("            border-radius: 10px;\n");
      out.write("            max-width: 75%;\n");
      out.write("            font-size: 0.95rem;\n");
      out.write("            word-wrap: break-word;\n");
      out.write("        }\n");
      out.write("        .user-message {\n");
      out.write("            flex-direction: row-reverse;\n");
      out.write("        }\n");
      out.write("        .user-message .message-content {\n");
      out.write("            background: #457b9d;\n");
      out.write("            margin-right: 10px;\n");
      out.write("            color: #fff;\n");
      out.write("        }\n");
      out.write("        .bot-message .message-content {\n");
      out.write("            background: #34495e;\n");
      out.write("            margin-left: 10px;\n");
      out.write("            color: #ecf0f1;\n");
      out.write("        }\n");
      out.write("        .profile-image {\n");
      out.write("            width: 40px;\n");
      out.write("            height: 40px;\n");
      out.write("            border-radius: 50%;\n");
      out.write("            object-fit: cover;\n");
      out.write("        }\n");
      out.write("        .chat-input-container {\n");
      out.write("            display: flex;\n");
      out.write("            padding: 15px;\n");
      out.write("            background: #1e272e;\n");
      out.write("            border-top: 1px solid #34495e;\n");
      out.write("        }\n");
      out.write("        #user-input {\n");
      out.write("            flex-grow: 1;\n");
      out.write("            padding: 12px;\n");
      out.write("            border: 1px solid #4a4a4a;\n");
      out.write("            border-radius: 10px;\n");
      out.write("            font-size: 1rem;\n");
      out.write("            background: #34495e;\n");
      out.write("            color: #ecf0f1;\n");
      out.write("            outline: none;\n");
      out.write("        }\n");
      out.write("        #send-button {\n");
      out.write("            padding: 12px 20px;\n");
      out.write("            background: linear-gradient(135deg, #457b9d, #1d3557);\n");
      out.write("            color: #fff;\n");
      out.write("            border: none;\n");
      out.write("            border-radius: 10px;\n");
      out.write("            margin-left: 10px;\n");
      out.write("            cursor: pointer;\n");
      out.write("            font-size: 1rem;\n");
      out.write("            transition: background 0.3s ease;\n");
      out.write("        }\n");
      out.write("        #send-button:hover {\n");
      out.write("            background: linear-gradient(135deg, #1d3557, #457b9d);\n");
      out.write("        }\n");
      out.write("        #send-button:disabled {\n");
      out.write("            background: #34495e;\n");
      out.write("            cursor: not-allowed;\n");
      out.write("        }\n");
      out.write("        @media (max-width: 480px) {\n");
      out.write("            .chat-container {\n");
      out.write("                height: 100vh;\n");
      out.write("                border-radius: 0;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        /* Scrollbar Styles */\n");
      out.write("        ::-webkit-scrollbar {\n");
      out.write("            width: 8px;\n");
      out.write("        }\n");
      out.write("        ::-webkit-scrollbar-track {\n");
      out.write("            background: #e6bf83;\n");
      out.write("        }\n");
      out.write("        ::-webkit-scrollbar-thumb {\n");
      out.write("            background: #4a4a4a;\n");
      out.write("            border-radius: 4px;\n");
      out.write("        }\n");
      out.write("        ::-webkit-scrollbar-thumb:hover {\n");
      out.write("            background: #5a5a5a;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"chat-container\">\n");
      out.write("        <div class=\"chat-header\">\n");
      out.write("            <h1> Chatbot</h1>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"chat-messages\" id=\"chat-messages\"></div>\n");
      out.write("        <div class=\"chat-input-container\">\n");
      out.write("            <input type=\"text\" id=\"user-input\" placeholder=\"Type your message...\">\n");
      out.write("            <button id=\"send-button\">Send</button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    <script>\n");
      out.write("        const API_KEY = 'YOUR_API_KEY_HERE';\n");
      out.write("        const API_URL = 'https://generativelanguage.googleapis.com/v1beta2/models/text-bison-001:generateText&#39;;\n");
      out.write("        const chatMessages = document.getElementById('chat-messages');\n");
      out.write("        const userInput = document.getElementById('user-input');\n");
      out.write("        const sendButton = document.getElementById('send-button');\n");
      out.write("\n");
      out.write("        async function generateResponse(prompt) {\n");
      out.write("            const response = await fetch(`");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${API_URL}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write("?key=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.evaluateExpression("${API_KEY}", java.lang.String.class, (PageContext)_jspx_page_context, null));
      out.write("`, {\n");
      out.write("                method: 'POST',\n");
      out.write("                headers: {\n");
      out.write("                    'Content-Type': 'application/json',\n");
      out.write("                },\n");
      out.write("                body: JSON.stringify({\n");
      out.write("                    prompt: prompt,\n");
      out.write("                    maxOutputTokens: 256\n");
      out.write("                })\n");
      out.write("            });\n");
      out.write("            if (!response.ok) {\n");
      out.write("                throw new Error('Failed to generate response');\n");
      out.write("            }\n");
      out.write("            const data = await response.json();\n");
      out.write("            return data.candidates[0].output;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function addMessage(message, isUser) {\n");
      out.write("            const messageElement = document.createElement('div');\n");
      out.write("            messageElement.classList.add('message');\n");
      out.write("            messageElement.classList.add(isUser ? 'user-message' : 'bot-message');\n");
      out.write("\n");
      out.write("            const profileImage = document.createElement('img');\n");
      out.write("            profileImage.classList.add('profile-image');\n");
      out.write("            profileImage.src = isUser ? 'user.jpg' : 'bot.jpg';\n");
      out.write("            profileImage.alt = isUser ? 'User' : 'Bot';\n");
      out.write("\n");
      out.write("            const messageContent = document.createElement('div');\n");
      out.write("            messageContent.classList.add('message-content');\n");
      out.write("            messageContent.textContent = message;\n");
      out.write("\n");
      out.write("            messageElement.appendChild(profileImage);\n");
      out.write("            messageElement.appendChild(messageContent);\n");
      out.write("            chatMessages.appendChild(messageElement);\n");
      out.write("            chatMessages.scrollTop = chatMessages.scrollHeight;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        async function handleUserInput() {\n");
      out.write("            const userMessage = userInput.value.trim();\n");
      out.write("            if (userMessage) {\n");
      out.write("                addMessage(userMessage, true);\n");
      out.write("                userInput.value = '';\n");
      out.write("                sendButton.disabled = true;\n");
      out.write("                userInput.disabled = true;\n");
      out.write("                try {\n");
      out.write("                    const botMessage = await generateResponse(userMessage);\n");
      out.write("                    addMessage(botMessage, false);\n");
      out.write("                } catch (error) {\n");
      out.write("                    console.error('Error:', error);\n");
      out.write("                    addMessage('Sorry, I encountered an error. Please try again.', false);\n");
      out.write("                } finally {\n");
      out.write("                    sendButton.disabled = false;\n");
      out.write("                    userInput.disabled = false;\n");
      out.write("                    userInput.focus();\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        sendButton.addEventListener('click', handleUserInput);\n");
      out.write("        userInput.addEventListener('keypress', (e) => {\n");
      out.write("            if (e.key === 'Enter' && !e.shiftKey) {\n");
      out.write("                e.preventDefault();\n");
      out.write("                handleUserInput();\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
